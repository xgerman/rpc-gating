- project:
    name: 'RPC-AIO-Jobs'
    # Note: branch is the branch for periodics to build
    #       branches is the branch pattern to match for PR Jobs.
    series:
      - kilo:
          branch: kilo
          branches: "kilo.*"
          DEPLOY_TELEGRAF: "yes"
      - liberty:
          branch: liberty
          branches: "liberty.*"
      - mitaka:
          branch: mitaka
          branches: "mitaka.*"
          UPGRADE_FROM_REF: "liberty"
    image:
      - trusty:
          IMAGE: "Ubuntu 14.04.5 LTS prepared for RPC deployment"
    action:
      - deploy:
          ACTION_STAGES: >-
            Install Tempest,
            Tempest Tests,
            Prepare Kibana Selenium,
            Kibana Tests
      - majorupgrade:
          ACTION_STAGES: >-
            Install Tempest,
            Tempest Tests,
            Prepare Kibana Selenium,
            Kibana Tests,
            Major Upgrade
    scenario:
      - swift
      - ceph:
          DEPLOY_SWIFT: "no"
          DEPLOY_CEPH: "yes"
          CONTEXT_USER_VARS: |
            ceph_stable_release: "hammer"
            cinder_cinder_conf_overrides:
                DEFAULT:
                    default_volume_type: ceph
            cinder_service_backup_driver: cinder.backup.drivers.ceph
            tempest_service_available_swift: false

    # NOTE: Hugh tested this and found that ztrigger overrides series and
    #       trigger doesn't, which is odd because both trigger and ztrigger
    #       sort after series.
    ztrigger:
      - pr:
          CRON: ""
          TRIGGER_USER_VARS: "maas_use_api: false"
      - periodic:
          branches: "do_not_build_on_pr"
          NUM_TO_KEEP: 10
    exclude:
      # Minor upgrades are only being executed
      # for r14.1.0->newton for now until
      # the minor upgrade testing process is
      # stabilised.
      - series: kilo
        action: minorupgrade
      - series: liberty
        action: minorupgrade
      - series: mitaka
        action: minorupgrade
      # Major upgrades are only run for mitaka
      # for the moment as no other major upgrade
      # testing or tooling has been implemented.
      - series: kilo
        action: majorupgrade
      - series: liberty
        action: majorupgrade
      # Ceph builds are not run for kilo at this time
      # as ceph deployment is not supported for
      # newton (yet) and the purpose of executing
      # kilo builds is for the leapfrog upgrade tests.
      - series: kilo
        scenario: ceph
    jobs:
      - 'RPC-AIO_{series}-{image}-{action}-{scenario}-{ztrigger}'

- job-template:
    # DEFAULTS
    DEFAULT_STAGES: >-
      Allocate Resources,
      Connect Slave,
      Prepare Deployment,
      Deploy RPC w/ Script,
      Cleanup,
      Destroy Slave
    ACTION_STAGES: ""
    TRIGGER_STAGES: ""
    branch: master
    NUM_TO_KEEP: 30
    IMAGE: "Ubuntu 14.04.5 LTS prepared for RPC deployment"
    DEPLOY_MAAS: "yes"
    DEPLOY_IRONIC: "no"
    DEPLOY_TELEGRAF: "NO"
    DEPLOY_INFLUX: "NO"
    TRIGGER_PR_PHRASE_ONLY: false
    # TEMPLATE
    name: 'RPC-AIO_{series}-{image}-{action}-{scenario}-{ztrigger}'
    project-type: workflow
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: "{NUM_TO_KEEP}"
      - rpc-openstack-github
    parameters:
      # See params.yml
      - kibana_selenium_params:
          KIBANA_SELENIUM_BRANCH: "{branch}"
      - rpc_repo_params:
          RPC_BRANCH: "{branch}"
      - rpc_deploy_params:
          DEPLOY_SWIFT: "{DEPLOY_SWIFT}"
          DEPLOY_CEPH: "{DEPLOY_CEPH}"
          DEPLOY_ELK: "{DEPLOY_ELK}"
          DEPLOY_MAAS: "{DEPLOY_MAAS}"
          DEPLOY_IRONIC: "{DEPLOY_IRONIC}"
          USER_VARS: |
            {CONTEXT_USER_VARS}
            {SERIES_USER_VARS}
            {TRIGGER_USER_VARS}
          UPGRADE_FROM_REF: "{UPGRADE_FROM_REF}"
      - rpc_gating_params
      - tigkstack_params:
          DEPLOY_TELEGRAF: "{DEPLOY_TELEGRAF}"
          DEPLOY_INFLUX: "{DEPLOY_INFLUX}"
      - instance_params:
          IMAGE: "{IMAGE}"
          FLAVOR: "{FLAVOR}"
          REGIONS: "{REGIONS}"
          FALLBACK_REGIONS: "{FALLBACK_REGIONS}"
      - string:
          name: STAGES
          default: "{DEFAULT_STAGES}, {ACTION_STAGES}, {TRIGGER_STAGES}"
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Deployment
              Deploy RPC w/ Script
              Install Tempest
              Tempest Tests
              Prepare Kibana Selenium
              Kibana Tests
              Minor Upgrade
              Major Upgrade
              Leapfrog Upgrade
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
              Destroy Slave
      - generate_test_params:
          GENERATE_TEST_NETWORKS: "{GENERATE_TEST_NETWORKS}"
          GENERATE_TEST_SERVERS: "{GENERATE_TEST_SERVERS}"
          GENERATE_TEST_VOLUMES: "{GENERATE_TEST_VOLUMES}"
    triggers:
      - timed: "{CRON}"
      - github-pull-request:
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: '.*recheck_cit_all.*|.*recheck_cit_{image}_{action}_{scenario}.*'
          only-trigger-phrase: "{obj:TRIGGER_PR_PHRASE_ONLY}"
          white-list-target-branches:
            - "{branches}"
          auth-id: "github_account_rpc_jenkins_svc"
          status-context: 'CIT/{image}-{action}-{scenario}'
          cancel-builds-on-update: true

    dsl: |
      library "rpc-gating@${{RPC_GATING_BRANCH}}"
      currentBuild.result = 'SUCCESS'
      // pass JJB axes through to environment
      env.SCENARIO = "{scenario}"
      env.TRIGGER = "{ztrigger}"
      env.TARGET = "aio"
      env.ACTION = "{action}"
      env.SERIES = "{series}"
      timeout(time: 8, unit: 'HOURS'){{
        common.shared_slave() {{
          try {{
            // prepare vars for leapfrog upgrade test of changes proposed to kilo
            // this is a special case as we only usually test upgrades on
            // changes to the destination branch.
            if (env.SERIES == "kilo"
                && env.TRIGGER == "pr"
                && env.ACTION == "leapfrogupgrade" ){{
                env.UPGRADE_FROM_REF="origin/pr/${{env.ghprbPullId}}/merge"
                kibana_branch = "kilo"
            }}
            // set kibana branch to newton for leapfrogs, see RE-677
            if (env.ACTION == "leapfrogupgrade" ){{ 
                env.KIBANA_SELENIUM_BRANCH="newton" 
            }}
            // We need to checkout the rpc-openstack repo on the CIT Slave
            // so that we can check whether the patch is a docs-only patch
            // before allocating resources unnecessarily.
            common.prepareRpcGit("auto", env.WORKSPACE)
            if(common.is_doc_update_pr("${{env.WORKSPACE}}/rpc-openstack")){{
              return
            }}
            // Adds maas token and url to environment
            // without adding another level of nesting
            maas.add_maas_env_vars()
            pubcloud.runonpubcloud {{
              // try within pubcloud node so we can archive archive_artifacts
              // after a failure, before the node is cleaned up.
              try {{
                environment_vars = [
                  "DEPLOY_HAPROXY=yes",
                  "DEPLOY_AIO=no",
                  "DEPLOY_TEMPEST=no",
                  "DEPLOY_SWIFT=${{DEPLOY_SWIFT}}",
                  "DEPLOY_CEPH=${{DEPLOY_CEPH}}",
                  "DEPLOY_ELK=${{DEPLOY_ELK}}",
                  "DEPLOY_IRONIC=${{DEPLOY_IRONIC}}",
                  ]
                aio_prepare.prepare()
                deploy.deploy_sh(environment_vars: environment_vars)
                if (env.STAGES.contains("Minor Upgrade")) {{
                  deploy.upgrade_minor(environment_vars: environment_vars)
                }} else if (env.STAGES.contains("Major Upgrade")) {{
                  deploy.upgrade_major(environment_vars: environment_vars)
                }} else if (env.STAGES.contains("Leapfrog Upgrade")) {{
                  deploy.upgrade_leapfrog(environment_vars: environment_vars)
                }}
                tempest.tempest()
                kibana.kibana(env.KIBANA_SELENIUM_BRANCH)
              }} catch (e) {{
                print(e)
                currentBuild.result = 'FAILURE'
                if (env.TRIGGER == 'periodic'){{
                  print("Creating jira issue in project RO for failed periodic build")
                  common.create_jira_issue("RO", env.BUILD_TAG, env.BUILD_URL, "Task")
                }} else {{
                  print ("Not creating jira issue as this build is not periodic, trigger: ${{env.TRIGGER}}")
                }}
                throw e
              }} finally {{
                common.rpco_archive_artifacts()
                common.safe_jira_comment("${{currentBuild.result}}: [${{env.BUILD_TAG}}|${{env.BUILD_URL}}]")
              }}
            }} //pubcloud slave
          }} finally {{
            common.delete_workspace()
          }}
        }} // cit node
      }} // timeout
